{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30776,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# !rm -rf /kaggle/train\n# !rm  ./DD*","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:53:44.564681Z","iopub.execute_input":"2024-11-01T14:53:44.565912Z","iopub.status.idle":"2024-11-01T14:53:45.863142Z","shell.execute_reply.started":"2024-11-01T14:53:44.565852Z","shell.execute_reply":"2024-11-01T14:53:45.861810Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"}]},{"cell_type":"code","source":"!python ff++.py --help","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n# !curl -L -o ./ff++.py \"https://www.dropbox.com/scl/fi/ulobzes9o3bdl1w5b7oyo/ff.py?rlkey=bu40la42ejnnjfgy6be3fefdm&st=f0j0b8sj&dl=1\"\n    \n# !curl -L -o ./ff.py \"https://www.dropbox.com/scl/fi/w41x2jnqodi9fg68g0s8u/ff.py?rlkey=qbr160e30go44qynwzew92kau&st=29gw4wcp&dl=1\"\n\n# !python ff++.py -d original -c c23 -t videos -n 1000 --server EU2 ff++/original\n# !python ff++.py -d original -c c23 -t videos --server EU2 ff++/original\n\n# !python ff++.py -d Deepfakes -c c23 -t videos -n 1000 --server EU2 ff++/deepfakes\n# !python ff++.py -d Deepfakes -c c23 -t videos --server EU2 ff++/deepfakes\n\n# !python ff++.py -d original -c c23 -t videos -n 1000 --server EU2 ff++/original & python ff++.py -d Deepfakes -c c23 -t videos -n 1000 --server EU2 ff++/deepfakes\n\n# !python ff++.py ff++/models --type models -d Deepfakes --server EU2 -n 1","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-11-01T10:53:13.331001Z","iopub.execute_input":"2024-11-01T10:53:13.331416Z","iopub.status.idle":"2024-11-01T11:24:06.955055Z","shell.execute_reply.started":"2024-11-01T10:53:13.331369Z","shell.execute_reply":"2024-11-01T11:24:06.953928Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    17  100    17    0     0     16      0  0:00:01  0:00:01 --:--:--    16\n100 10991  100 10991    0     0   9096      0  0:00:01  0:00:01 --:--:--  9096\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    17  100    17    0     0      3      0  0:00:05  0:00:05 --:--:--     4\n100  7594  100  7594    0     0   1372      0  0:00:05  0:00:05 --:--:--  1372\nBy pressing any key to continue you confirm that you have agreed to the FaceForensics terms of use as described at:\nhttp://kaldir.vc.in.tum.de/faceforensics/webpage/FaceForensics_TOS.pdf\n***\nDownloading videos of dataset \"manipulated_sequences/Deepfakes\"\nBy pressing any key to continue you confirm that you have agreed to the FaceForensics terms of use as described at:\nhttp://kaldir.vc.in.tum.de/faceforensics/webpage/FaceForensics_TOS.pdf\n***\nDownloading videos of dataset \"original_sequences/youtube\"\nDownloading the first 1000 videos\nOutput path: ff++/deepfakes/manipulated_sequences/Deepfakes/c23/videos\n  0%|                                                  | 0/1000 [00:00<?, ?it/s]Downloading the first 1000 videos\nOutput path: ff++/original/original_sequences/youtube/c23/videos\n100%|███████████████████████████████████████| 1000/1000 [30:24<00:00,  1.82s/it]\n100%|███████████████████████████████████████| 1000/1000 [30:42<00:00,  1.84s/it]\nCPU times: user 29.1 s, sys: 5.8 s, total: 34.9 s\nWall time: 30min 53s\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport random\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.applications import *\nimport tensorflow as tf\nfrom tensorflow import keras \nfrom tabulate import tabulate\nfrom IPython.display import HTML\nfrom datetime import datetime\nfrom concurrent.futures import ThreadPoolExecutor","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:57:35.451188Z","iopub.execute_input":"2024-11-01T14:57:35.451826Z","iopub.status.idle":"2024-11-01T14:57:35.458640Z","shell.execute_reply.started":"2024-11-01T14:57:35.451786Z","shell.execute_reply":"2024-11-01T14:57:35.457772Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"print(tf.__version__)\nprint(tf.config.list_physical_devices('GPU'))\ndef gpu_config():\n    gpus = tf.config.list_physical_devices('GPU')\n    if gpus:\n        try:\n            for gpu in gpus:\n                tf.config.experimental.set_virtual_device_configuration(\n                    gpu,\n                    [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=14336)])\n        except RuntimeError as e:\n            print(e)\n            \n# gpu_config()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-01T14:24:17.331634Z","iopub.execute_input":"2024-11-01T14:24:17.332360Z","iopub.status.idle":"2024-11-01T14:24:17.796171Z","shell.execute_reply.started":"2024-11-01T14:24:17.332308Z","shell.execute_reply":"2024-11-01T14:24:17.795002Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"2.16.1\n[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\n","output_type":"stream"}]},{"cell_type":"code","source":"def rename_video_files(folder):\n    for old_name in os.listdir(folder):\n        prefix = old_name.split('_')[0]\n\n        new_name = f\"{prefix}_deepfake.mp4\"\n\n        old_path = os.path.join(folder, old_name)\n        new_path = os.path.join(folder, new_name)\n\n        os.rename(old_path, new_path)\n        \ndef get_file_paths(folder):\n    file_paths = []\n    for file_name in sorted(os.listdir(folder)):\n        file_path = os.path.join(folder, file_name)\n        file_paths.append(file_path)\n        \n    return file_paths\n        \ndef extract_frames(video_path, output_folder, target_fps=10):\n    os.makedirs(output_folder, exist_ok=True)\n    cap = cv2.VideoCapture(video_path)\n    original_fps = cap.get(cv2.CAP_PROP_FPS)\n    frame_interval = int(original_fps / target_fps)\n    frame_count = 0\n    saved_count = 0\n\n    while True:\n        ret, frame = cap.read()\n        if not ret:\n            break\n        if frame_count % frame_interval == 0:\n            frame_filename = os.path.join(output_folder, f\"frame_{saved_count}.jpg\")\n            cv2.imwrite(frame_filename, frame)\n            saved_count += 1\n        frame_count += 1\n\n    cap.release()\n    \ndef create_labels(output_dir, label):\n    return [(os.path.join(output_dir, frame), label) for frame in os.listdir(output_dir)]\n\ndef preprocess_single_frame(frame_path):\n    img = image.load_img(frame_path, target_size=(224, 224))\n    img_array = image.img_to_array(img) / 255.0\n    return np.expand_dims(img_array, axis=0)\n\n# def create_data_from_frames(class_dir, frames_output_dir, class_label):\n#     video_paths = [os.path.join(class_dir, video) for video in os.listdir(class_dir)]\n#     print(f\"{class_dir}\")\n#     for i,video in enumerate(video_paths):\n#         extract_frames(video, frames_output_dir)\n#         print(f\"[{i}] Extracted frames from {video}\", end=\"\\r\")\n#     return create_labels(frames_output_dir, class_label)\n\ndef extract_video_frames(video, frames_output_dir, idx):\n    extract_frames(video, frames_output_dir)\n    print(f\"[{idx}] Extracted frames from {video}\", end=\"\\r\")\n\ndef create_data_from_frames(class_dir, frames_output_dir, class_label, max_workers=4):\n    video_paths = [os.path.join(class_dir, video) for video in os.listdir(class_dir)]\n    os.makedirs(frames_output_dir, exist_ok=True)\n\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        for i, video in enumerate(video_paths):\n            executor.submit(extract_video_frames, video, frames_output_dir, i)\n        \n    return create_labels(frames_output_dir, class_label)\n\ndef create_df(data, csv_path):\n    df = pd.DataFrame(data, columns=[\"frame_path\", \"label\"])\n    df = df.sample(frac=1).reset_index(drop=True)\n\n    df.to_csv(csv_path, index=False)\n    print(f\"Created {csv_path}\")\n    \ndef copy_files(source_dir, file_list_range, output_dir):\n    start, end = file_list_range\n    file_list = os.listdir(source_dir)\n    files_to_copy = file_list[start:end]\n    os.makedirs(output_dir, exist_ok=True)\n\n    for file in files_to_copy:\n        src_path = os.path.join(source_dir, file)\n        dst_path = os.path.join(output_dir, file)\n        shutil.copy2(src_path, dst_path)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:57:43.774044Z","iopub.execute_input":"2024-11-01T14:57:43.775050Z","iopub.status.idle":"2024-11-01T14:57:43.796288Z","shell.execute_reply.started":"2024-11-01T14:57:43.775008Z","shell.execute_reply":"2024-11-01T14:57:43.795404Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"original_dir = \"/kaggle/working/ff++/original/original_sequences/youtube/c23/videos\"\ndeepfake_dir = \"/kaggle/working/ff++/deepfakes/manipulated_sequences/Deepfakes/c23/videos\"","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:24:17.831885Z","iopub.execute_input":"2024-11-01T14:24:17.832217Z","iopub.status.idle":"2024-11-01T14:24:17.845191Z","shell.execute_reply.started":"2024-11-01T14:24:17.832185Z","shell.execute_reply":"2024-11-01T14:24:17.844362Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"rename_video_files(deepfake_dir)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T11:36:24.509248Z","iopub.execute_input":"2024-11-01T11:36:24.509625Z","iopub.status.idle":"2024-11-01T11:36:24.541289Z","shell.execute_reply.started":"2024-11-01T11:36:24.509590Z","shell.execute_reply":"2024-11-01T11:36:24.540267Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"len(os.listdir(original_dir)), len(os.listdir(deepfake_dir))","metadata":{"execution":{"iopub.status.busy":"2024-11-01T11:36:33.152382Z","iopub.execute_input":"2024-11-01T11:36:33.152800Z","iopub.status.idle":"2024-11-01T11:36:33.162054Z","shell.execute_reply.started":"2024-11-01T11:36:33.152744Z","shell.execute_reply":"2024-11-01T11:36:33.161139Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(1000, 1000)"},"metadata":{}}]},{"cell_type":"code","source":"sorted(os.listdir(original_dir))[:5], sorted(os.listdir(deepfake_dir))[:5]","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-11-01T11:36:42.563842Z","iopub.execute_input":"2024-11-01T11:36:42.564776Z","iopub.status.idle":"2024-11-01T11:36:42.572845Z","shell.execute_reply.started":"2024-11-01T11:36:42.564735Z","shell.execute_reply":"2024-11-01T11:36:42.571934Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(['000.mp4', '001.mp4', '002.mp4', '003.mp4', '004.mp4'],\n ['000_deepfake.mp4',\n  '001_deepfake.mp4',\n  '002_deepfake.mp4',\n  '003_deepfake.mp4',\n  '004_deepfake.mp4'])"},"metadata":{}}]},{"cell_type":"code","source":"copy_files(original_dir, (0,900), \"./dataset/train/original\")\ncopy_files(deepfake_dir, (0,900), \"./dataset/train/deepfake\")\n\ncopy_files(original_dir, (900,1000), \"./dataset/test/original\")\ncopy_files(deepfake_dir, (900,1000), \"./dataset/test/deepfake\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T11:42:19.284780Z","iopub.execute_input":"2024-11-01T11:42:19.285167Z","iopub.status.idle":"2024-11-01T11:42:48.305466Z","shell.execute_reply.started":"2024-11-01T11:42:19.285131Z","shell.execute_reply":"2024-11-01T11:42:48.304590Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"class_1_train = \"./dataset/train/original\"\nclass_2_train = \"./dataset/train/deepfake\"\n\nclass_1_test = \"./dataset/test/original\"\nclass_2_test = \"./dataset/test/deepfake\"","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:24:18.194930Z","iopub.execute_input":"2024-11-01T14:24:18.195363Z","iopub.status.idle":"2024-11-01T14:24:18.200041Z","shell.execute_reply.started":"2024-11-01T14:24:18.195324Z","shell.execute_reply":"2024-11-01T14:24:18.199124Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"len(os.listdir(class_1_train)), len(os.listdir(class_2_train))","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:24:20.558278Z","iopub.execute_input":"2024-11-01T14:24:20.558627Z","iopub.status.idle":"2024-11-01T14:24:20.567901Z","shell.execute_reply.started":"2024-11-01T14:24:20.558595Z","shell.execute_reply":"2024-11-01T14:24:20.566867Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(900, 900)"},"metadata":{}}]},{"cell_type":"code","source":"%%time\nclass_1_data = create_data_from_frames(class_dir=class_1_train, frames_output_dir=\"./train/class_1\", class_label=0)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T12:02:10.302354Z","iopub.execute_input":"2024-11-01T12:02:10.303132Z","iopub.status.idle":"2024-11-01T12:32:09.120525Z","shell.execute_reply.started":"2024-11-01T12:02:10.303087Z","shell.execute_reply":"2024-11-01T12:32:09.119476Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"CPU times: user 1h 54min 23s, sys: 1min 45s, total: 1h 56min 8s\nWall time: 29min 58s\n","output_type":"stream"}]},{"cell_type":"code","source":"%%time\nclass_2_data = create_data_from_frames(class_dir=class_2_train, frames_output_dir=\"./train/class_2\", class_label=1)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T12:32:09.122689Z","iopub.execute_input":"2024-11-01T12:32:09.123558Z","iopub.status.idle":"2024-11-01T13:01:44.024831Z","shell.execute_reply.started":"2024-11-01T12:32:09.123505Z","shell.execute_reply":"2024-11-01T13:01:44.023814Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"CPU times: user 1h 52min 51s, sys: 1min 42s, total: 1h 54min 34se.mp4\nWall time: 29min 34s\n","output_type":"stream"}]},{"cell_type":"code","source":"class_1_2_data = class_1_data + class_2_data\ncreate_df(class_1_2_data, \"./train_labels.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T13:01:44.026008Z","iopub.execute_input":"2024-11-01T13:01:44.026296Z","iopub.status.idle":"2024-11-01T13:01:44.088554Z","shell.execute_reply.started":"2024-11-01T13:01:44.026266Z","shell.execute_reply":"2024-11-01T13:01:44.087646Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Created ./train_labels.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"class_1_2_df = pd.read_csv(\"./train_labels.csv\")\nclass_1_2_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-11-01T13:01:44.090620Z","iopub.execute_input":"2024-11-01T13:01:44.090946Z","iopub.status.idle":"2024-11-01T13:01:44.126734Z","shell.execute_reply.started":"2024-11-01T13:01:44.090913Z","shell.execute_reply":"2024-11-01T13:01:44.125929Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"                      frame_path  label\n0  ./train/class_1/frame_265.jpg      0\n1  ./train/class_1/frame_120.jpg      0\n2  ./train/class_2/frame_388.jpg      1\n3  ./train/class_1/frame_308.jpg      0\n4  ./train/class_1/frame_293.jpg      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>frame_path</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>./train/class_1/frame_265.jpg</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>./train/class_1/frame_120.jpg</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>./train/class_2/frame_388.jpg</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>./train/class_1/frame_308.jpg</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>./train/class_1/frame_293.jpg</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df, val_df = train_test_split(class_1_2_df, test_size=0.2, random_state=42)\n\ntrain_df.to_csv(\"./train_labels_split.csv\", index=False)\nval_df.to_csv(\"./val_labels_split.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T13:01:44.128033Z","iopub.execute_input":"2024-11-01T13:01:44.128770Z","iopub.status.idle":"2024-11-01T13:01:44.141017Z","shell.execute_reply.started":"2024-11-01T13:01:44.128720Z","shell.execute_reply":"2024-11-01T13:01:44.140218Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv(\"./train_labels_split.csv\")\nval_df = pd.read_csv(\"./val_labels_split.csv\")\n\ntrain_df['label'] = train_df['label'].astype(str)\nval_df['label'] = val_df['label'].astype(str)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:58:01.870028Z","iopub.execute_input":"2024-11-01T14:58:01.870735Z","iopub.status.idle":"2024-11-01T14:58:01.885080Z","shell.execute_reply.started":"2024-11-01T14:58:01.870692Z","shell.execute_reply":"2024-11-01T14:58:01.884127Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"%%time\nclass_1_test = create_data_from_frames(class_dir=class_1_test, frames_output_dir=\"./test/class_1\", class_label=0)\n\nclass_2_test = create_data_from_frames(class_dir=class_2_test, frames_output_dir=\"./test/class_2\", class_label=1)\n\nclass_1_2_test = class_1_test + class_2_test\nclass_1_2_test_df = create_df(class_1_2_test, \"./test_labels.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T13:01:44.153658Z","iopub.execute_input":"2024-11-01T13:01:44.153987Z","iopub.status.idle":"2024-11-01T13:08:48.886915Z","shell.execute_reply.started":"2024-11-01T13:01:44.153956Z","shell.execute_reply":"2024-11-01T13:08:48.885945Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Created ./test_labels.csvm ./dataset/test/deepfake/950_deepfake.mp4\nCPU times: user 26min 43s, sys: 23.1 s, total: 27min 6s\nWall time: 7min 4s\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df = pd.read_csv(\"./test_labels.csv\")\n \ntest_df['label'] = test_df['label'].astype(str)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:58:06.122643Z","iopub.execute_input":"2024-11-01T14:58:06.123023Z","iopub.status.idle":"2024-11-01T14:58:06.131562Z","shell.execute_reply.started":"2024-11-01T14:58:06.122986Z","shell.execute_reply":"2024-11-01T14:58:06.130690Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"datagen = ImageDataGenerator(\n    rescale=1.0/255,\n    rotation_range=40,  # Increased from 20 to 40 degrees\n    width_shift_range=0.3,  # Increased from 0.2 to 0.3\n    height_shift_range=0.3,  # Increased from 0.2 to 0.3\n    shear_range=0.2,\n    zoom_range=0.3,  # Increased from 0.2 to 0.3\n    horizontal_flip=True,\n    fill_mode='nearest',\n    brightness_range=[0.8, 1.2],  # Randomly change brightness between 80% to 120%\n)\n\n\n\ntrain_generator = datagen.flow_from_dataframe(\n    dataframe=train_df,\n    x_col=\"frame_path\",\n    y_col=\"label\",\n    target_size=(224, 224), \n    batch_size=32,\n    class_mode=\"binary\"\n)\n\nval_generator = datagen.flow_from_dataframe(\n    dataframe=val_df,\n    x_col=\"frame_path\",\n    y_col=\"label\",\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode=\"binary\"\n)\n\ntest_generator = datagen.flow_from_dataframe(\n    dataframe=test_df,\n    x_col=\"frame_path\",\n    y_col=\"label\",\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode=\"binary\"\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:58:53.483473Z","iopub.execute_input":"2024-11-01T14:58:53.483914Z","iopub.status.idle":"2024-11-01T14:58:53.539729Z","shell.execute_reply.started":"2024-11-01T14:58:53.483874Z","shell.execute_reply":"2024-11-01T14:58:53.538861Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Found 1261 validated image filenames belonging to 2 classes.\nFound 316 validated image filenames belonging to 2 classes.\nFound 1381 validated image filenames belonging to 2 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"# model = Sequential(\n#     [\n#         Input(shape=(224, 224, 3)),\n#         Conv2D(32, (3, 3), activation='relu'),\n#         MaxPooling2D(2, 2),\n#         Conv2D(64, (3, 3), activation='relu'),\n#         MaxPooling2D(2, 2),\n#         Flatten(),\n#         Dense(128, activation='relu'),\n#         Dropout(0.5),\n#         Dense(1, activation='sigmoid')\n#     ],\n#     name=\"DD_Conv2d\"\n# )\n\n# model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n\n\n\n# Load EfficientNetB0 with pre-trained weights\nbase_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Freeze the base model\nbase_model.trainable = False\n\n# Build the complete model\nmodel = Sequential([\n    base_model,\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.5),\n    Dense(1, activation='sigmoid')  # Use 1 for binary classification\n], name=\"DD_EB0\")\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:59:51.441691Z","iopub.execute_input":"2024-11-01T14:59:51.442119Z","iopub.status.idle":"2024-11-01T14:59:52.535085Z","shell.execute_reply.started":"2024-11-01T14:59:51.442065Z","shell.execute_reply":"2024-11-01T14:59:52.534116Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-11-01T14:59:55.189163Z","iopub.execute_input":"2024-11-01T14:59:55.189764Z","iopub.status.idle":"2024-11-01T14:59:55.219060Z","shell.execute_reply.started":"2024-11-01T14:59:55.189723Z","shell.execute_reply":"2024-11-01T14:59:55.218100Z"},"trusted":true},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"DD_EB0\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"DD_EB0\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ efficientnetb0 (\u001b[38;5;33mFunctional\u001b[0m)     │ ?                      │     \u001b[38;5;34m4,049,571\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_5 (\u001b[38;5;33mFlatten\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (\u001b[38;5;33mDense\u001b[0m)                │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (\u001b[38;5;33mDense\u001b[0m)                │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ efficientnetb0 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)     │ ?                      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">4,049,571</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,049,571\u001b[0m (15.45 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,049,571</span> (15.45 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m4,049,571\u001b[0m (15.45 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,049,571</span> (15.45 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"os.makedirs(\"models\", exist_ok=True)\nmodel_checkpoint = keras.callbacks.ModelCheckpoint( \"./models/DD_EB0_epoch({epoch:02d})_acc({accuracy:.2f})_valacc({val_accuracy:.2f})_loss({loss:.2f})_valloss({val_loss:.2f}).keras\",\n    monitor=\"val_accuracy\",\n    verbose=1,\n    save_best_only=True,\n    mode=\"max\"\n)\n\nprint(model_checkpoint.filepath)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:00:25.381275Z","iopub.execute_input":"2024-11-01T15:00:25.381680Z","iopub.status.idle":"2024-11-01T15:00:25.388054Z","shell.execute_reply.started":"2024-11-01T15:00:25.381640Z","shell.execute_reply":"2024-11-01T15:00:25.386974Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"./models/DD_EB0_epoch({epoch:02d})_acc({accuracy:.2f})_valacc({val_accuracy:.2f})_loss({loss:.2f})_valloss({val_loss:.2f}).keras\n","output_type":"stream"}]},{"cell_type":"code","source":"history = model.fit(\n    train_generator,\n    validation_data=val_generator,\n    epochs=10,\n    callbacks=[model_checkpoint]\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:00:41.469830Z","iopub.execute_input":"2024-11-01T15:00:41.470326Z","iopub.status.idle":"2024-11-01T15:05:40.605886Z","shell.execute_reply.started":"2024-11-01T15:00:41.470286Z","shell.execute_reply":"2024-11-01T15:05:40.605116Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"Epoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 805ms/step - accuracy: 0.5289 - loss: 2.5464\nEpoch 1: val_accuracy improved from -inf to 0.60127, saving model to ./models/DD_EB0_epoch(01)_acc(0.54)_valacc(0.60)_loss(1.33)_valloss(0.69).keras\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - accuracy: 0.5291 - loss: 2.5167 - val_accuracy: 0.6013 - val_loss: 0.6859\nEpoch 2/10\n\u001b[1m39/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 403ms/step - accuracy: 0.5553 - loss: 0.7035\nEpoch 2: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 516ms/step - accuracy: 0.5556 - loss: 0.7039 - val_accuracy: 0.6013 - val_loss: 0.6921\nEpoch 3/10\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - accuracy: 0.5766 - loss: 0.6936\nEpoch 3: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 514ms/step - accuracy: 0.5764 - loss: 0.6936 - val_accuracy: 0.6013 - val_loss: 0.6900\nEpoch 4/10\n\u001b[1m39/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - accuracy: 0.5472 - loss: 0.6916\nEpoch 4: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 513ms/step - accuracy: 0.5482 - loss: 0.6915 - val_accuracy: 0.6013 - val_loss: 0.6884\nEpoch 5/10\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - accuracy: 0.5766 - loss: 0.6892\nEpoch 5: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 513ms/step - accuracy: 0.5764 - loss: 0.6893 - val_accuracy: 0.6013 - val_loss: 0.6865\nEpoch 6/10\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 393ms/step - accuracy: 0.5633 - loss: 0.6891\nEpoch 6: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 515ms/step - accuracy: 0.5635 - loss: 0.6891 - val_accuracy: 0.6013 - val_loss: 0.6852\nEpoch 7/10\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - accuracy: 0.5843 - loss: 0.6866\nEpoch 7: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 523ms/step - accuracy: 0.5839 - loss: 0.6866 - val_accuracy: 0.6013 - val_loss: 0.6840\nEpoch 8/10\n\u001b[1m39/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - accuracy: 0.5809 - loss: 0.6860\nEpoch 8: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 515ms/step - accuracy: 0.5803 - loss: 0.6860 - val_accuracy: 0.6013 - val_loss: 0.6829\nEpoch 9/10\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 397ms/step - accuracy: 0.5694 - loss: 0.6866\nEpoch 9: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 520ms/step - accuracy: 0.5694 - loss: 0.6865 - val_accuracy: 0.6013 - val_loss: 0.6819\nEpoch 10/10\n\u001b[1m39/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - accuracy: 0.5660 - loss: 0.6865\nEpoch 10: val_accuracy did not improve from 0.60127\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 514ms/step - accuracy: 0.5661 - loss: 0.6865 - val_accuracy: 0.6013 - val_loss: 0.6810\n","output_type":"stream"}]},{"cell_type":"code","source":"df_history = pd.DataFrame(history.history)\n\nprint(tabulate(df_history, headers='keys', tablefmt='psql'))","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:06:16.129158Z","iopub.execute_input":"2024-11-01T15:06:16.130069Z","iopub.status.idle":"2024-11-01T15:06:16.138637Z","shell.execute_reply.started":"2024-11-01T15:06:16.130009Z","shell.execute_reply":"2024-11-01T15:06:16.137731Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"+----+------------+----------+----------------+------------+\n|    |   accuracy |     loss |   val_accuracy |   val_loss |\n|----+------------+----------+----------------+------------|\n|  0 |   0.539255 | 1.32859  |       0.601266 |   0.685876 |\n|  1 |   0.562252 | 0.710618 |       0.601266 |   0.692135 |\n|  2 |   0.567803 | 0.695241 |       0.601266 |   0.689967 |\n|  3 |   0.568596 | 0.690565 |       0.601266 |   0.688364 |\n|  4 |   0.568596 | 0.689567 |       0.601266 |   0.686453 |\n|  5 |   0.568596 | 0.688645 |       0.601266 |   0.685245 |\n|  6 |   0.568596 | 0.687788 |       0.601266 |   0.684016 |\n|  7 |   0.568596 | 0.687118 |       0.601266 |   0.682913 |\n|  8 |   0.568596 | 0.686525 |       0.601266 |   0.681907 |\n|  9 |   0.568596 | 0.686021 |       0.601266 |   0.681038 |\n+----+------------+----------+----------------+------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.figure(figsize=(12, 5))\n\n# Accuracy vs Validation Accuracy\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('DD_Conv2d - Accuracy vs Validation Accuracy')\nplt.legend()\n\n# Loss vs Validation Loss\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('DD_Conv2d - Loss vs Validation Loss')\nplt.legend()\n\n# Show the plots\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:06:20.300064Z","iopub.execute_input":"2024-11-01T15:06:20.300476Z","iopub.status.idle":"2024-11-01T15:06:20.937882Z","shell.execute_reply.started":"2024-11-01T15:06:20.300438Z","shell.execute_reply":"2024-11-01T15:06:20.936988Z"},"trusted":true},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"model = keras.models.load_model(\"/kaggle/working/models/DD_EB0_epoch(01)_acc(0.54)_valacc(0.60)_loss(1.33)_valloss(0.69).keras\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:06:35.879411Z","iopub.execute_input":"2024-11-01T15:06:35.879780Z","iopub.status.idle":"2024-11-01T15:06:38.738126Z","shell.execute_reply.started":"2024-11-01T15:06:35.879746Z","shell.execute_reply":"2024-11-01T15:06:38.737313Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"loss, accuracy = model.evaluate(test_generator)\nprint(f\"Test Accuracy: {accuracy * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:06:42.822704Z","iopub.execute_input":"2024-11-01T15:06:42.823123Z","iopub.status.idle":"2024-11-01T15:07:15.574407Z","shell.execute_reply.started":"2024-11-01T15:06:42.823083Z","shell.execute_reply":"2024-11-01T15:07:15.573493Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 590ms/step - accuracy: 0.3507 - loss: 0.8921\nTest Accuracy: 34.32%\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = model.predict(test_generator)\npredicted_classes = np.round(predictions).astype(int).flatten()\n\ntrue_classes = test_generator.classes","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:07:15.575952Z","iopub.execute_input":"2024-11-01T15:07:15.576327Z","iopub.status.idle":"2024-11-01T15:07:47.925646Z","shell.execute_reply.started":"2024-11-01T15:07:15.576291Z","shell.execute_reply":"2024-11-01T15:07:47.924667Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m31s\u001b[0m 601ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Classification Report:\")\nprint(classification_report(true_classes, predicted_classes))","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:07:47.926993Z","iopub.execute_input":"2024-11-01T15:07:47.927428Z","iopub.status.idle":"2024-11-01T15:07:47.944048Z","shell.execute_reply.started":"2024-11-01T15:07:47.927383Z","shell.execute_reply":"2024-11-01T15:07:47.943124Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.34      1.00      0.51       474\n           1       0.00      0.00      0.00       907\n\n    accuracy                           0.34      1381\n   macro avg       0.17      0.50      0.26      1381\nweighted avg       0.12      0.34      0.18      1381\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}]},{"cell_type":"code","source":"conf_matrix = confusion_matrix(true_classes, predicted_classes)\n\n# Plotting the heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n            xticklabels=test_generator.class_indices.keys(),\n            yticklabels=test_generator.class_indices.keys())\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix - DD_Conv2d\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-01T15:07:47.945921Z","iopub.execute_input":"2024-11-01T15:07:47.946259Z","iopub.status.idle":"2024-11-01T15:07:48.103813Z","shell.execute_reply.started":"2024-11-01T15:07:47.946225Z","shell.execute_reply":"2024-11-01T15:07:48.102505Z"},"trusted":true},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]}]}