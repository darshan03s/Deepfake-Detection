{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30776,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# !rm -rf ./dataset\n# !rm  ./*.png","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:10:14.022697Z","iopub.execute_input":"2024-11-04T13:10:14.023661Z","iopub.status.idle":"2024-11-04T13:10:15.007311Z","shell.execute_reply.started":"2024-11-04T13:10:14.023616Z","shell.execute_reply":"2024-11-04T13:10:15.005990Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# !python ff++.py --help","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n# !curl -L -o ./ff++.py \"https://www.dropbox.com/scl/fi/ulobzes9o3bdl1w5b7oyo/ff.py?rlkey=bu40la42ejnnjfgy6be3fefdm&st=f0j0b8sj&dl=1\"\n    \n# !curl -L -o ./ff.py \"https://www.dropbox.com/scl/fi/w41x2jnqodi9fg68g0s8u/ff.py?rlkey=qbr160e30go44qynwzew92kau&st=29gw4wcp&dl=1\"\n\n# !python ff++.py -d original -c c23 -t videos -n 1000 --server EU2 ff++/original\n# !python ff++.py -d original -c c23 -t videos --server EU2 ff++/original\n\n# !python ff++.py -d Deepfakes -c c23 -t videos -n 1000 --server EU2 ff++/deepfakes\n# !python ff++.py -d Deepfakes -c c23 -t videos --server EU2 ff++/deepfakes\n\n# !python ff++.py -d original -c c23 -t videos -n 1000 --server EU2 ff++/original & python ff++.py -d Deepfakes -c c23 -t videos -n 1000 --server EU2 ff++/deepfakes\n\n# !python ff++.py ff++/models --type models -d Deepfakes --server EU2 -n 1","metadata":{"scrolled":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%capture\n!pip install mtcnn","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:59:15.898768Z","iopub.execute_input":"2024-11-04T13:59:15.899603Z","iopub.status.idle":"2024-11-04T13:59:27.283076Z","shell.execute_reply.started":"2024-11-04T13:59:15.899563Z","shell.execute_reply":"2024-11-04T13:59:27.281959Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2\ncv2.ocl.setUseOpenCL(False)\nimport random\nimport pickle\nimport shutil\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.applications import *\nimport tensorflow as tf\nfrom tensorflow import keras \nfrom mtcnn import MTCNN    # (Multi-task Cascaded Convolutional Networks)\nfrom tabulate import tabulate\nfrom IPython.display import HTML, Video\nfrom datetime import datetime\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\n\nprint(tf.__version__)\nprint(tf.config.list_physical_devices('GPU'))\ndef gpu_config():\n    gpus = tf.config.list_physical_devices('GPU')\n    if gpus:\n        try:\n            for gpu in gpus:\n                tf.config.experimental.set_virtual_device_configuration(\n                    gpu,\n                    [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=14336)])\n        except RuntimeError as e:\n            print(e)\n            \n# gpu_config()\n\nseed_constant = 27\nnp.random.seed(seed_constant)\nrandom.seed(seed_constant)\ntf.random.set_seed(seed_constant)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:11:19.138809Z","iopub.execute_input":"2024-11-04T13:11:19.139521Z","iopub.status.idle":"2024-11-04T13:11:34.561413Z","shell.execute_reply.started":"2024-11-04T13:11:19.139476Z","shell.execute_reply":"2024-11-04T13:11:34.560355Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"2.16.1\n[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\n","output_type":"stream"}]},{"cell_type":"code","source":"def rename_video_files(folder):\n    for old_name in os.listdir(folder):\n        prefix = old_name.split('_')[0]\n\n        new_name = f\"{prefix}_deepfake.mp4\"\n\n        old_path = os.path.join(folder, old_name)\n        new_path = os.path.join(folder, new_name)\n\n        os.rename(old_path, new_path)\n        \ndef get_file_paths(folder):\n    file_paths = []\n    for file_name in sorted(os.listdir(folder)):\n        file_path = os.path.join(folder, file_name)\n        file_paths.append(file_path)\n        \n    return file_paths\n    \ndef copy_files(source_dir, file_list_range, output_dir):\n    start, end = file_list_range\n    file_list = sorted(os.listdir(source_dir))\n    files_to_copy = file_list[start:end]\n    os.makedirs(output_dir, exist_ok=True)\n\n    for file in files_to_copy:\n        src_path = os.path.join(source_dir, file)\n        dst_path = os.path.join(output_dir, file)\n        shutil.copy2(src_path, dst_path)\n        \ndef history_table(history):\n    metrics = list(history.keys())\n    num_epochs = len(history[metrics[0]])\n\n    history_table = []\n    for epoch in range(num_epochs):\n        row = [epoch + 1] + [history[metric][epoch] for metric in metrics]\n        history_table.append(row)\n\n    print(tabulate(history_table, headers=[\"Epoch\"] + metrics, tablefmt=\"grid\"))\n    \ndef plot_acc(history, name):\n    plt.figure(figsize=(8, 5))\n    plt.plot(history['accuracy'], label='Training Accuracy')\n    if 'val_accuracy' in history:\n        plt.plot(history['val_accuracy'], label='Validation Accuracy')\n    plt.title(f'{name} Model Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n    plt.grid()\n    plt.show()\n\ndef plot_loss(history, name):\n    plt.figure(figsize=(8, 5))\n    plt.plot(history['loss'], label='Training Loss')\n    if 'val_loss' in history:\n        plt.plot(history['val_loss'], label='Validation Loss')\n    plt.title(f'{name} Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.grid()\n    plt.show()\n    \ndef dump_json(json, name):\n    with open(f\"{name}.json\", \"w\") as f:\n        json.dump(json, f)\n    print(f\"Saved {name}.json\")\n    \ndef load_json(name):\n    with open(f\"{name}.json\", \"r\") as f:\n        return json.load(f)\n    \ndef plot_model(model, name):\n    keras.utils.plot_model(conv_lstm, to_file = f\"{name}_structure_plot.png\", show_shapes=True, show_layer_names = True)\n    \ndef save_np(np_array, name):\n    np.save(f\"{name}.npy\", labels)\n    \ndef load_np(name):\n    return np.load(f\"{name}.npy\")\n\ndef save_pkl(sequence, name):\n    with open(f\"{name}.pkl\", \"wb\") as f:\n        pickle.dump(sequence, f)\n        \ndef load_pkl(name):\n    with open(f\"{name}.pkl\", \"rb\") as f:\n        return pickle.load(f)\n    \ndef get_model_checkpoint(name):\n    os.makedirs(\"models\", exist_ok=True) \n    filepath = f\"./models/DD_{name}\" + \"_epoch({epoch:02d})_acc({accuracy:.2f})_valacc({val_accuracy:.2f})_loss({loss:.2f})_valloss({val_loss:.2f}).keras\"\n    model_checkpoint = keras.callbacks.ModelCheckpoint(filepath,\n        monitor=\"val_accuracy\",\n        verbose=1,\n        save_best_only=True,\n        mode=\"max\"\n    )\n\n    print(model_checkpoint.filepath)\n    \n    return model_checkpoint\n    \ndef get_early_stopping(patience):\n    early_stopping = keras.callbacks.EarlyStopping(\n    monitor=\"val_accuracy\",   \n    patience=patience,              \n    mode=\"max\",               \n    restore_best_weights=True\n)\n    return early_stopping","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:16:33.805350Z","iopub.execute_input":"2024-11-04T15:16:33.806514Z","iopub.status.idle":"2024-11-04T15:16:33.829332Z","shell.execute_reply.started":"2024-11-04T15:16:33.806466Z","shell.execute_reply":"2024-11-04T15:16:33.828272Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"original_dir = \"./ff++/original/original_sequences/youtube/c23/videos\"\ndeepfake_dir = \"./ff++/deepfakes/manipulated_sequences/Deepfakes/c23/videos\"","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:11:07.529767Z","iopub.execute_input":"2024-11-04T13:11:07.530473Z","iopub.status.idle":"2024-11-04T13:11:07.534480Z","shell.execute_reply.started":"2024-11-04T13:11:07.530430Z","shell.execute_reply":"2024-11-04T13:11:07.533479Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# rename_video_files(deepfake_dir)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(os.listdir(original_dir)), len(os.listdir(deepfake_dir))","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:11:41.201276Z","iopub.execute_input":"2024-11-04T13:11:41.201972Z","iopub.status.idle":"2024-11-04T13:11:41.210705Z","shell.execute_reply.started":"2024-11-04T13:11:41.201929Z","shell.execute_reply":"2024-11-04T13:11:41.209790Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"(1000, 1000)"},"metadata":{}}]},{"cell_type":"code","source":"sorted(os.listdir(original_dir))[:5], sorted(os.listdir(deepfake_dir))[:5]","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-11-04T13:11:44.328490Z","iopub.execute_input":"2024-11-04T13:11:44.329360Z","iopub.status.idle":"2024-11-04T13:11:44.337494Z","shell.execute_reply.started":"2024-11-04T13:11:44.329317Z","shell.execute_reply":"2024-11-04T13:11:44.336517Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"(['000.mp4', '001.mp4', '002.mp4', '003.mp4', '004.mp4'],\n ['000_deepfake.mp4',\n  '001_deepfake.mp4',\n  '002_deepfake.mp4',\n  '003_deepfake.mp4',\n  '004_deepfake.mp4'])"},"metadata":{}}]},{"cell_type":"code","source":"# copy_files(original_dir, (0,300), \"./dataset/original\")\n# copy_files(deepfake_dir, (0,300), \"./dataset/deepfake\")\n\n# copy_files(original_dir, (900,1000), \"./dataset/test/original\")\n# copy_files(deepfake_dir, (900,1000), \"./dataset/test/deepfake\")","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:11:57.808645Z","iopub.execute_input":"2024-11-04T13:11:57.809071Z","iopub.status.idle":"2024-11-04T13:11:58.798510Z","shell.execute_reply.started":"2024-11-04T13:11:57.809035Z","shell.execute_reply":"2024-11-04T13:11:58.797425Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"original_dir = \"./dataset/original\"\ndeepfake_dir = \"./dataset/deepfake\"","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:12:06.702733Z","iopub.execute_input":"2024-11-04T13:12:06.703595Z","iopub.status.idle":"2024-11-04T13:12:06.707483Z","shell.execute_reply.started":"2024-11-04T13:12:06.703557Z","shell.execute_reply":"2024-11-04T13:12:06.706553Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"sorted(os.listdir(original_dir))[:5], sorted(os.listdir(deepfake_dir))[:5]","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:12:09.663496Z","iopub.execute_input":"2024-11-04T13:12:09.663914Z","iopub.status.idle":"2024-11-04T13:12:09.671977Z","shell.execute_reply.started":"2024-11-04T13:12:09.663874Z","shell.execute_reply":"2024-11-04T13:12:09.671085Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(['000.mp4', '001.mp4', '002.mp4', '003.mp4', '004.mp4'],\n ['000_deepfake.mp4',\n  '001_deepfake.mp4',\n  '002_deepfake.mp4',\n  '003_deepfake.mp4',\n  '004_deepfake.mp4'])"},"metadata":{}}]},{"cell_type":"code","source":"original_video = random.choice(os.listdir(original_dir))\ndeepfake_video = random.choice(os.listdir(deepfake_dir))","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:12:33.445962Z","iopub.execute_input":"2024-11-04T13:12:33.446638Z","iopub.status.idle":"2024-11-04T13:12:33.451868Z","shell.execute_reply.started":"2024-11-04T13:12:33.446589Z","shell.execute_reply":"2024-11-04T13:12:33.450895Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"Video(os.path.join(original_dir, original_video), height=200, width=400)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:14:00.592479Z","iopub.execute_input":"2024-11-04T13:14:00.593360Z","iopub.status.idle":"2024-11-04T13:14:00.599616Z","shell.execute_reply.started":"2024-11-04T13:14:00.593316Z","shell.execute_reply":"2024-11-04T13:14:00.598687Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"<IPython.core.display.Video object>","text/html":"<video src=\"./dataset/original/004.mp4\" controls  width=\"400\"  height=\"200\">\n      Your browser does not support the <code>video</code> element.\n    </video>"},"metadata":{}}]},{"cell_type":"code","source":"Video(os.path.join(deepfake_dir, deepfake_video), height=200, width=400)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:14:02.744051Z","iopub.execute_input":"2024-11-04T13:14:02.744437Z","iopub.status.idle":"2024-11-04T13:14:02.751995Z","shell.execute_reply.started":"2024-11-04T13:14:02.744393Z","shell.execute_reply":"2024-11-04T13:14:02.750820Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"<IPython.core.display.Video object>","text/html":"<video src=\"./dataset/deepfake/162_deepfake.mp4\" controls  width=\"400\"  height=\"200\">\n      Your browser does not support the <code>video</code> element.\n    </video>"},"metadata":{}}]},{"cell_type":"code","source":"frame_count = 16 \noutput_shape = (224, 224)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T13:58:26.814805Z","iopub.execute_input":"2024-11-04T13:58:26.815588Z","iopub.status.idle":"2024-11-04T13:58:26.819633Z","shell.execute_reply.started":"2024-11-04T13:58:26.815548Z","shell.execute_reply":"2024-11-04T13:58:26.818765Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Initialize MTCNN face detector\ndetector = MTCNN()\n\ndef load_and_preprocess_video(video_path, frame_count=16, output_shape=(224, 224)):\n    cap = cv2.VideoCapture(video_path)\n    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    frame_indices = np.linspace(0, total_frames - 1, frame_count, dtype=int)\n    \n    frames = []\n    for i in frame_indices:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, i)\n        ret, frame = cap.read()\n        if not ret:\n            break\n        \n        # Detect face and crop\n        face = detect_and_crop_face(frame, output_shape)\n        if face is not None:\n            frames.append(face)\n    \n    cap.release()\n    \n    # Ensure the number of frames matches frame_count\n    if len(frames) == frame_count:\n        return np.array(frames, dtype=np.float32) / 255.0\n    else:\n        return None  # Discard videos without enough frames\n\ndef detect_and_crop_face(frame, output_shape=(224, 224)):\n    # Detect face using MTCNN\n    result = detector.detect_faces(frame)\n    \n    if result:\n        # Get bounding box of the first detected face\n        x, y, width, height = result[0]['box']\n        x, y = max(0, x), max(0, y)  # Ensure coordinates are within frame\n        \n        # Crop the face region\n        cropped_face = frame[y:y + height, x:x + width]\n        \n        # Resize to the output shape\n        resized_face = cv2.resize(cropped_face, output_shape)\n        return resized_face\n    else:\n        return None","metadata":{"execution":{"iopub.status.busy":"2024-11-04T14:16:08.752578Z","iopub.execute_input":"2024-11-04T14:16:08.753506Z","iopub.status.idle":"2024-11-04T14:16:08.911929Z","shell.execute_reply.started":"2024-11-04T14:16:08.753442Z","shell.execute_reply":"2024-11-04T14:16:08.911100Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"# Process videos and organize data\ndata = []\nlabels = []","metadata":{"execution":{"iopub.status.busy":"2024-11-04T14:18:16.899886Z","iopub.execute_input":"2024-11-04T14:18:16.900617Z","iopub.status.idle":"2024-11-04T14:18:16.905303Z","shell.execute_reply.started":"2024-11-04T14:18:16.900571Z","shell.execute_reply":"2024-11-04T14:18:16.904103Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"# Process original videos\nfor i,video_file in enumerate(os.listdir(original_dir)[:100]):\n    video_path = os.path.join(original_dir, video_file)\n    frames = load_and_preprocess_video(video_path, frame_count=frame_count, output_shape=output_shape)\n    if frames is not None:\n        print(f\"[{i+1}] Processed {video_path} - Extracted {len(frames)} frames\")\n        data.append(frames)\n        labels.append(0)  # Label for original videos","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-11-04T14:29:30.424921Z","iopub.execute_input":"2024-11-04T14:29:30.425325Z","iopub.status.idle":"2024-11-04T14:44:56.086423Z","shell.execute_reply.started":"2024-11-04T14:29:30.425290Z","shell.execute_reply":"2024-11-04T14:44:56.085529Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"[1] Processed ./dataset/original/272.mp4 - Extracted 16 frames\n[2] Processed ./dataset/original/086.mp4 - Extracted 16 frames\n[3] Processed ./dataset/original/053.mp4 - Extracted 16 frames\n[4] Processed ./dataset/original/298.mp4 - Extracted 16 frames\n[5] Processed ./dataset/original/120.mp4 - Extracted 16 frames\n[6] Processed ./dataset/original/191.mp4 - Extracted 16 frames\n[7] Processed ./dataset/original/253.mp4 - Extracted 16 frames\n[8] Processed ./dataset/original/131.mp4 - Extracted 16 frames\n[9] Processed ./dataset/original/089.mp4 - Extracted 16 frames\n[10] Processed ./dataset/original/008.mp4 - Extracted 16 frames\n[11] Processed ./dataset/original/062.mp4 - Extracted 16 frames\n[12] Processed ./dataset/original/147.mp4 - Extracted 16 frames\n[13] Processed ./dataset/original/075.mp4 - Extracted 16 frames\n[14] Processed ./dataset/original/276.mp4 - Extracted 16 frames\n[15] Processed ./dataset/original/149.mp4 - Extracted 16 frames\n[16] Processed ./dataset/original/026.mp4 - Extracted 16 frames\n[17] Processed ./dataset/original/091.mp4 - Extracted 16 frames\n[18] Processed ./dataset/original/221.mp4 - Extracted 16 frames\n[19] Processed ./dataset/original/252.mp4 - Extracted 16 frames\n[20] Processed ./dataset/original/013.mp4 - Extracted 16 frames\n[21] Processed ./dataset/original/060.mp4 - Extracted 16 frames\n[22] Processed ./dataset/original/156.mp4 - Extracted 16 frames\n[23] Processed ./dataset/original/067.mp4 - Extracted 16 frames\n[24] Processed ./dataset/original/247.mp4 - Extracted 16 frames\n[26] Processed ./dataset/original/238.mp4 - Extracted 16 frames\n[27] Processed ./dataset/original/159.mp4 - Extracted 16 frames\n[28] Processed ./dataset/original/174.mp4 - Extracted 16 frames\n[29] Processed ./dataset/original/069.mp4 - Extracted 16 frames\n[30] Processed ./dataset/original/028.mp4 - Extracted 16 frames\n[33] Processed ./dataset/original/269.mp4 - Extracted 16 frames\n[34] Processed ./dataset/original/226.mp4 - Extracted 16 frames\n[35] Processed ./dataset/original/234.mp4 - Extracted 16 frames\n[36] Processed ./dataset/original/175.mp4 - Extracted 16 frames\n[37] Processed ./dataset/original/078.mp4 - Extracted 16 frames\n[38] Processed ./dataset/original/070.mp4 - Extracted 16 frames\n[39] Processed ./dataset/original/092.mp4 - Extracted 16 frames\n[40] Processed ./dataset/original/219.mp4 - Extracted 16 frames\n[41] Processed ./dataset/original/201.mp4 - Extracted 16 frames\n[42] Processed ./dataset/original/146.mp4 - Extracted 16 frames\n[43] Processed ./dataset/original/015.mp4 - Extracted 16 frames\n[44] Processed ./dataset/original/077.mp4 - Extracted 16 frames\n[45] Processed ./dataset/original/052.mp4 - Extracted 16 frames\n[46] Processed ./dataset/original/088.mp4 - Extracted 16 frames\n[47] Processed ./dataset/original/114.mp4 - Extracted 16 frames\n[48] Processed ./dataset/original/271.mp4 - Extracted 16 frames\n[49] Processed ./dataset/original/264.mp4 - Extracted 16 frames\n[50] Processed ./dataset/original/050.mp4 - Extracted 16 frames\n[51] Processed ./dataset/original/288.mp4 - Extracted 16 frames\n[52] Processed ./dataset/original/199.mp4 - Extracted 16 frames\n[53] Processed ./dataset/original/164.mp4 - Extracted 16 frames\n[54] Processed ./dataset/original/119.mp4 - Extracted 16 frames\n[55] Processed ./dataset/original/010.mp4 - Extracted 16 frames\n[56] Processed ./dataset/original/225.mp4 - Extracted 16 frames\n[57] Processed ./dataset/original/204.mp4 - Extracted 16 frames\n[58] Processed ./dataset/original/122.mp4 - Extracted 16 frames\n[59] Processed ./dataset/original/143.mp4 - Extracted 16 frames\n[60] Processed ./dataset/original/203.mp4 - Extracted 16 frames\n[61] Processed ./dataset/original/046.mp4 - Extracted 16 frames\n[62] Processed ./dataset/original/160.mp4 - Extracted 16 frames\n[63] Processed ./dataset/original/033.mp4 - Extracted 16 frames\n[64] Processed ./dataset/original/262.mp4 - Extracted 16 frames\n[65] Processed ./dataset/original/082.mp4 - Extracted 16 frames\n[66] Processed ./dataset/original/040.mp4 - Extracted 16 frames\n[67] Processed ./dataset/original/239.mp4 - Extracted 16 frames\n[69] Processed ./dataset/original/192.mp4 - Extracted 16 frames\n[70] Processed ./dataset/original/108.mp4 - Extracted 16 frames\n[71] Processed ./dataset/original/183.mp4 - Extracted 16 frames\n[72] Processed ./dataset/original/233.mp4 - Extracted 16 frames\n[73] Processed ./dataset/original/235.mp4 - Extracted 16 frames\n[74] Processed ./dataset/original/232.mp4 - Extracted 16 frames\n[75] Processed ./dataset/original/267.mp4 - Extracted 16 frames\n[76] Processed ./dataset/original/103.mp4 - Extracted 16 frames\n[77] Processed ./dataset/original/105.mp4 - Extracted 16 frames\n[78] Processed ./dataset/original/059.mp4 - Extracted 16 frames\n[79] Processed ./dataset/original/014.mp4 - Extracted 16 frames\n[80] Processed ./dataset/original/064.mp4 - Extracted 16 frames\n[81] Processed ./dataset/original/107.mp4 - Extracted 16 frames\n[82] Processed ./dataset/original/080.mp4 - Extracted 16 frames\n[83] Processed ./dataset/original/277.mp4 - Extracted 16 frames\n[84] Processed ./dataset/original/035.mp4 - Extracted 16 frames\n[85] Processed ./dataset/original/036.mp4 - Extracted 16 frames\n[86] Processed ./dataset/original/113.mp4 - Extracted 16 frames\n[87] Processed ./dataset/original/181.mp4 - Extracted 16 frames\n[88] Processed ./dataset/original/180.mp4 - Extracted 16 frames\n[89] Processed ./dataset/original/284.mp4 - Extracted 16 frames\n[90] Processed ./dataset/original/009.mp4 - Extracted 16 frames\n[91] Processed ./dataset/original/224.mp4 - Extracted 16 frames\n[92] Processed ./dataset/original/144.mp4 - Extracted 16 frames\n[93] Processed ./dataset/original/042.mp4 - Extracted 16 frames\n[94] Processed ./dataset/original/250.mp4 - Extracted 16 frames\n[95] Processed ./dataset/original/127.mp4 - Extracted 16 frames\n[96] Processed ./dataset/original/151.mp4 - Extracted 16 frames\n[97] Processed ./dataset/original/121.mp4 - Extracted 16 frames\n[98] Processed ./dataset/original/074.mp4 - Extracted 16 frames\n[99] Processed ./dataset/original/022.mp4 - Extracted 16 frames\n","output_type":"stream"}]},{"cell_type":"code","source":"# Process deepfake videos\nfor i,video_file in enumerate(os.listdir(deepfake_dir)[:100]):\n    video_path = os.path.join(deepfake_dir, video_file)\n    frames = load_and_preprocess_video(video_path, frame_count=frame_count, output_shape=output_shape)\n    if frames is not None:\n        print(f\"[{i+1}] Processed {video_path} - Extracted {len(frames)} frames\")\n        data.append(frames)\n        labels.append(1)  # Label for deepfake videos","metadata":{"execution":{"iopub.status.busy":"2024-11-04T14:44:56.088059Z","iopub.execute_input":"2024-11-04T14:44:56.088370Z","iopub.status.idle":"2024-11-04T15:00:21.145673Z","shell.execute_reply.started":"2024-11-04T14:44:56.088337Z","shell.execute_reply":"2024-11-04T15:00:21.144654Z"},"scrolled":true,"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"[1] Processed ./dataset/deepfake/292_deepfake.mp4 - Extracted 16 frames\n[2] Processed ./dataset/deepfake/104_deepfake.mp4 - Extracted 16 frames\n[3] Processed ./dataset/deepfake/185_deepfake.mp4 - Extracted 16 frames\n[4] Processed ./dataset/deepfake/032_deepfake.mp4 - Extracted 16 frames\n[5] Processed ./dataset/deepfake/184_deepfake.mp4 - Extracted 16 frames\n[6] Processed ./dataset/deepfake/272_deepfake.mp4 - Extracted 16 frames\n[7] Processed ./dataset/deepfake/060_deepfake.mp4 - Extracted 16 frames\n[8] Processed ./dataset/deepfake/043_deepfake.mp4 - Extracted 16 frames\n[10] Processed ./dataset/deepfake/062_deepfake.mp4 - Extracted 16 frames\n[11] Processed ./dataset/deepfake/245_deepfake.mp4 - Extracted 16 frames\n[12] Processed ./dataset/deepfake/248_deepfake.mp4 - Extracted 16 frames\n[13] Processed ./dataset/deepfake/198_deepfake.mp4 - Extracted 16 frames\n[14] Processed ./dataset/deepfake/022_deepfake.mp4 - Extracted 16 frames\n[15] Processed ./dataset/deepfake/034_deepfake.mp4 - Extracted 16 frames\n[16] Processed ./dataset/deepfake/133_deepfake.mp4 - Extracted 16 frames\n[17] Processed ./dataset/deepfake/224_deepfake.mp4 - Extracted 16 frames\n[18] Processed ./dataset/deepfake/079_deepfake.mp4 - Extracted 16 frames\n[19] Processed ./dataset/deepfake/117_deepfake.mp4 - Extracted 16 frames\n[20] Processed ./dataset/deepfake/290_deepfake.mp4 - Extracted 16 frames\n[21] Processed ./dataset/deepfake/058_deepfake.mp4 - Extracted 16 frames\n[22] Processed ./dataset/deepfake/148_deepfake.mp4 - Extracted 16 frames\n[23] Processed ./dataset/deepfake/009_deepfake.mp4 - Extracted 16 frames\n[24] Processed ./dataset/deepfake/089_deepfake.mp4 - Extracted 16 frames\n[26] Processed ./dataset/deepfake/208_deepfake.mp4 - Extracted 16 frames\n[27] Processed ./dataset/deepfake/130_deepfake.mp4 - Extracted 16 frames\n[28] Processed ./dataset/deepfake/129_deepfake.mp4 - Extracted 16 frames\n[29] Processed ./dataset/deepfake/084_deepfake.mp4 - Extracted 16 frames\n[30] Processed ./dataset/deepfake/167_deepfake.mp4 - Extracted 16 frames\n[31] Processed ./dataset/deepfake/086_deepfake.mp4 - Extracted 16 frames\n[32] Processed ./dataset/deepfake/274_deepfake.mp4 - Extracted 16 frames\n[33] Processed ./dataset/deepfake/159_deepfake.mp4 - Extracted 16 frames\n[34] Processed ./dataset/deepfake/141_deepfake.mp4 - Extracted 16 frames\n[35] Processed ./dataset/deepfake/018_deepfake.mp4 - Extracted 16 frames\n[36] Processed ./dataset/deepfake/005_deepfake.mp4 - Extracted 16 frames\n[37] Processed ./dataset/deepfake/052_deepfake.mp4 - Extracted 16 frames\n[38] Processed ./dataset/deepfake/260_deepfake.mp4 - Extracted 16 frames\n[39] Processed ./dataset/deepfake/123_deepfake.mp4 - Extracted 16 frames\n[40] Processed ./dataset/deepfake/126_deepfake.mp4 - Extracted 16 frames\n[41] Processed ./dataset/deepfake/057_deepfake.mp4 - Extracted 16 frames\n[42] Processed ./dataset/deepfake/225_deepfake.mp4 - Extracted 16 frames\n[43] Processed ./dataset/deepfake/044_deepfake.mp4 - Extracted 16 frames\n[44] Processed ./dataset/deepfake/209_deepfake.mp4 - Extracted 16 frames\n[45] Processed ./dataset/deepfake/121_deepfake.mp4 - Extracted 16 frames\n[46] Processed ./dataset/deepfake/196_deepfake.mp4 - Extracted 16 frames\n[47] Processed ./dataset/deepfake/006_deepfake.mp4 - Extracted 16 frames\n[48] Processed ./dataset/deepfake/029_deepfake.mp4 - Extracted 16 frames\n[49] Processed ./dataset/deepfake/118_deepfake.mp4 - Extracted 16 frames\n[50] Processed ./dataset/deepfake/145_deepfake.mp4 - Extracted 16 frames\n[51] Processed ./dataset/deepfake/003_deepfake.mp4 - Extracted 16 frames\n[52] Processed ./dataset/deepfake/101_deepfake.mp4 - Extracted 16 frames\n[53] Processed ./dataset/deepfake/212_deepfake.mp4 - Extracted 16 frames\n[55] Processed ./dataset/deepfake/207_deepfake.mp4 - Extracted 16 frames\n[56] Processed ./dataset/deepfake/134_deepfake.mp4 - Extracted 16 frames\n[57] Processed ./dataset/deepfake/218_deepfake.mp4 - Extracted 16 frames\n[58] Processed ./dataset/deepfake/254_deepfake.mp4 - Extracted 16 frames\n[59] Processed ./dataset/deepfake/266_deepfake.mp4 - Extracted 16 frames\n[60] Processed ./dataset/deepfake/019_deepfake.mp4 - Extracted 16 frames\n[61] Processed ./dataset/deepfake/287_deepfake.mp4 - Extracted 16 frames\n[62] Processed ./dataset/deepfake/070_deepfake.mp4 - Extracted 16 frames\n[63] Processed ./dataset/deepfake/273_deepfake.mp4 - Extracted 16 frames\n[64] Processed ./dataset/deepfake/210_deepfake.mp4 - Extracted 16 frames\n[65] Processed ./dataset/deepfake/047_deepfake.mp4 - Extracted 16 frames\n[66] Processed ./dataset/deepfake/054_deepfake.mp4 - Extracted 16 frames\n[67] Processed ./dataset/deepfake/082_deepfake.mp4 - Extracted 16 frames\n[68] Processed ./dataset/deepfake/180_deepfake.mp4 - Extracted 16 frames\n[69] Processed ./dataset/deepfake/135_deepfake.mp4 - Extracted 16 frames\n[70] Processed ./dataset/deepfake/263_deepfake.mp4 - Extracted 16 frames\n[71] Processed ./dataset/deepfake/083_deepfake.mp4 - Extracted 16 frames\n[72] Processed ./dataset/deepfake/269_deepfake.mp4 - Extracted 16 frames\n[73] Processed ./dataset/deepfake/189_deepfake.mp4 - Extracted 16 frames\n[74] Processed ./dataset/deepfake/125_deepfake.mp4 - Extracted 16 frames\n[75] Processed ./dataset/deepfake/190_deepfake.mp4 - Extracted 16 frames\n[76] Processed ./dataset/deepfake/281_deepfake.mp4 - Extracted 16 frames\n[77] Processed ./dataset/deepfake/136_deepfake.mp4 - Extracted 16 frames\n[78] Processed ./dataset/deepfake/188_deepfake.mp4 - Extracted 16 frames\n[79] Processed ./dataset/deepfake/262_deepfake.mp4 - Extracted 16 frames\n[81] Processed ./dataset/deepfake/051_deepfake.mp4 - Extracted 16 frames\n[82] Processed ./dataset/deepfake/286_deepfake.mp4 - Extracted 16 frames\n[83] Processed ./dataset/deepfake/072_deepfake.mp4 - Extracted 16 frames\n[85] Processed ./dataset/deepfake/085_deepfake.mp4 - Extracted 16 frames\n[86] Processed ./dataset/deepfake/232_deepfake.mp4 - Extracted 16 frames\n[87] Processed ./dataset/deepfake/088_deepfake.mp4 - Extracted 16 frames\n[88] Processed ./dataset/deepfake/004_deepfake.mp4 - Extracted 16 frames\n[89] Processed ./dataset/deepfake/166_deepfake.mp4 - Extracted 16 frames\n[90] Processed ./dataset/deepfake/119_deepfake.mp4 - Extracted 16 frames\n[91] Processed ./dataset/deepfake/143_deepfake.mp4 - Extracted 16 frames\n[92] Processed ./dataset/deepfake/046_deepfake.mp4 - Extracted 16 frames\n[93] Processed ./dataset/deepfake/249_deepfake.mp4 - Extracted 16 frames\n[94] Processed ./dataset/deepfake/199_deepfake.mp4 - Extracted 16 frames\n[95] Processed ./dataset/deepfake/192_deepfake.mp4 - Extracted 16 frames\n[96] Processed ./dataset/deepfake/226_deepfake.mp4 - Extracted 16 frames\n[97] Processed ./dataset/deepfake/107_deepfake.mp4 - Extracted 16 frames\n[98] Processed ./dataset/deepfake/221_deepfake.mp4 - Extracted 16 frames\n[100] Processed ./dataset/deepfake/028_deepfake.mp4 - Extracted 16 frames\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert to numpy arrays\ndata = np.array(data)\nlabels = np.array(labels)\n\n# Save arrays for easy loading\nnp.save(\"video_data.npy\", data)\nnp.save(\"video_labels.npy\", labels)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:00:21.147186Z","iopub.execute_input":"2024-11-04T15:00:21.148033Z","iopub.status.idle":"2024-11-04T15:00:23.343889Z","shell.execute_reply.started":"2024-11-04T15:00:21.147983Z","shell.execute_reply":"2024-11-04T15:00:23.342997Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"data = np.load(\"video_data.npy\")\nlabels = np.load(\"video_labels.npy\")\n\n# Split the data into training and remaining (validation + test)\nX_train, X_temp, y_train, y_temp = train_test_split(data, labels, test_size=0.3, random_state=42, stratify=labels)\n\n# Split the remaining data into validation and test sets\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)\n\n# Check the shapes of the splits\nprint(f\"Training data shape: {X_train.shape}, Training labels shape: {y_train.shape}\")\nprint(f\"Validation data shape: {X_val.shape}, Validation labels shape: {y_val.shape}\")\nprint(f\"Test data shape: {X_test.shape}, Test labels shape: {y_test.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:03:49.926898Z","iopub.execute_input":"2024-11-04T15:03:49.927703Z","iopub.status.idle":"2024-11-04T15:03:51.532256Z","shell.execute_reply.started":"2024-11-04T15:03:49.927664Z","shell.execute_reply":"2024-11-04T15:03:51.531246Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"Training data shape: (149, 16, 224, 224, 3), Training labels shape: (149,)\nValidation data shape: (32, 16, 224, 224, 3), Validation labels shape: (32,)\nTest data shape: (32, 16, 224, 224, 3), Test labels shape: (32,)\n","output_type":"stream"}]},{"cell_type":"code","source":"def create_cnn_lstm_model(input_shape):\n    model = Sequential(name = \"cnn_lstm\")\n    \n    # 3D CNN for feature extraction from each frame\n    model.add(Conv3D(32, (3, 3, 3), activation='relu', input_shape=input_shape))\n    model.add(MaxPooling3D((1, 2, 2)))\n    \n    model.add(Conv3D(64, (3, 3, 3), activation='relu'))\n    model.add(MaxPooling3D((1, 2, 2)))\n    \n    model.add(Conv3D(128, (3, 3, 3), activation='relu'))\n    model.add(MaxPooling3D((1, 2, 2)))\n    \n    model.add(Conv3D(256, (3, 3, 3), activation='relu'))\n    model.add(MaxPooling3D((1, 2, 2)))\n\n    # Flatten the CNN output to feed into LSTM\n    model.add(TimeDistributed(Flatten()))\n\n    # LSTM layer\n    model.add(LSTM(128, return_sequences=False))\n\n    # Output layer for binary classification\n    model.add(Dense(1, activation='sigmoid'))  # Sigmoid for binary classification\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:12:38.825895Z","iopub.execute_input":"2024-11-04T15:12:38.826281Z","iopub.status.idle":"2024-11-04T15:12:38.834846Z","shell.execute_reply.started":"2024-11-04T15:12:38.826244Z","shell.execute_reply":"2024-11-04T15:12:38.833801Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"# Define input shape\nframe_count = 16  # Number of frames per video\nheight, width, channels = 224, 224, 3  # Adjust based on your preprocessing\n\n# Create the model\ninput_shape = (frame_count, height, width, channels)\nmodel = create_cnn_lstm_model(input_shape)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Model summary\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:12:41.295808Z","iopub.execute_input":"2024-11-04T15:12:41.296195Z","iopub.status.idle":"2024-11-04T15:12:41.437132Z","shell.execute_reply.started":"2024-11-04T15:12:41.296160Z","shell.execute_reply":"2024-11-04T15:12:41.436242Z"},"trusted":true},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"cnn_lstm\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"cnn_lstm\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv3d_4 (\u001b[38;5;33mConv3D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m222\u001b[0m, \u001b[38;5;34m222\u001b[0m,   │         \u001b[38;5;34m2,624\u001b[0m │\n│                                 │ \u001b[38;5;34m32\u001b[0m)                    │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_4 (\u001b[38;5;33mMaxPooling3D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m111\u001b[0m, \u001b[38;5;34m111\u001b[0m,   │             \u001b[38;5;34m0\u001b[0m │\n│                                 │ \u001b[38;5;34m32\u001b[0m)                    │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv3d_5 (\u001b[38;5;33mConv3D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m109\u001b[0m, \u001b[38;5;34m109\u001b[0m,   │        \u001b[38;5;34m55,360\u001b[0m │\n│                                 │ \u001b[38;5;34m64\u001b[0m)                    │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_5 (\u001b[38;5;33mMaxPooling3D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m54\u001b[0m, \u001b[38;5;34m54\u001b[0m, \u001b[38;5;34m64\u001b[0m) │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv3d_6 (\u001b[38;5;33mConv3D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m52\u001b[0m, \u001b[38;5;34m52\u001b[0m,     │       \u001b[38;5;34m221,312\u001b[0m │\n│                                 │ \u001b[38;5;34m128\u001b[0m)                   │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_6 (\u001b[38;5;33mMaxPooling3D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m,     │             \u001b[38;5;34m0\u001b[0m │\n│                                 │ \u001b[38;5;34m128\u001b[0m)                   │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv3d_7 (\u001b[38;5;33mConv3D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m256\u001b[0m) │       \u001b[38;5;34m884,992\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_7 (\u001b[38;5;33mMaxPooling3D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m256\u001b[0m) │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ time_distributed_1              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m36864\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mTimeDistributed\u001b[0m)               │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │    \u001b[38;5;34m18,940,416\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │           \u001b[38;5;34m129\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv3d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">222</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">222</span>,   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,624</span> │\n│                                 │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                    │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">111</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">111</span>,   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│                                 │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                    │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv3d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">109</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">109</span>,   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">55,360</span> │\n│                                 │ <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                    │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">54</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">54</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>) │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv3d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">52</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">52</span>,     │       <span style=\"color: #00af00; text-decoration-color: #00af00\">221,312</span> │\n│                                 │ <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                   │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>,     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│                                 │ <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                   │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv3d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>) │       <span style=\"color: #00af00; text-decoration-color: #00af00\">884,992</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling3d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>) │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ time_distributed_1              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">36864</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)               │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">18,940,416</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m20,104,833\u001b[0m (76.69 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">20,104,833</span> (76.69 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m20,104,833\u001b[0m (76.69 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">20,104,833</span> (76.69 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"mc = get_model_checkpoint(\"cnn_lstm\")\nes = get_early_stopping(20)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:16:38.537239Z","iopub.execute_input":"2024-11-04T15:16:38.537607Z","iopub.status.idle":"2024-11-04T15:16:38.542881Z","shell.execute_reply.started":"2024-11-04T15:16:38.537573Z","shell.execute_reply":"2024-11-04T15:16:38.541916Z"},"trusted":true},"execution_count":74,"outputs":[{"name":"stdout","text":"./models/DD_cnn_lstm_epoch({epoch:02d})_acc({accuracy:.2f})_valacc({val_accuracy:.2f})_loss({loss:.2f})_valloss({val_loss:.2f}).keras\n","output_type":"stream"}]},{"cell_type":"code","source":"cnn_lstm_history = model.fit(\n    X_train, y_train,\n    validation_data=(X_val, y_val),\n    epochs=50, \n    batch_size=16,  \n    callbacks=[mc, es]\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:19:26.737611Z","iopub.execute_input":"2024-11-04T15:19:26.738542Z","iopub.status.idle":"2024-11-04T15:24:28.491664Z","shell.execute_reply.started":"2024-11-04T15:19:26.738497Z","shell.execute_reply":"2024-11-04T15:24:28.490799Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.4937 - loss: 0.9305   \nEpoch 1: val_accuracy improved from -inf to 0.43750, saving model to ./models/DD_cnn_lstm_epoch(01)_acc(0.49)_valacc(0.44)_loss(0.84)_valloss(0.71).keras\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 1s/step - accuracy: 0.4934 - loss: 0.9224 - val_accuracy: 0.4375 - val_loss: 0.7145\nEpoch 2/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 829ms/step - accuracy: 0.4257 - loss: 0.7165\nEpoch 2: val_accuracy did not improve from 0.43750\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 917ms/step - accuracy: 0.4272 - loss: 0.7161 - val_accuracy: 0.4375 - val_loss: 0.7103\nEpoch 3/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 831ms/step - accuracy: 0.4257 - loss: 0.7117\nEpoch 3: val_accuracy did not improve from 0.43750\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 919ms/step - accuracy: 0.4272 - loss: 0.7113 - val_accuracy: 0.4375 - val_loss: 0.7057\nEpoch 4/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 828ms/step - accuracy: 0.4257 - loss: 0.7066\nEpoch 4: val_accuracy did not improve from 0.43750\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 915ms/step - accuracy: 0.4272 - loss: 0.7063 - val_accuracy: 0.4375 - val_loss: 0.7016\nEpoch 5/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 821ms/step - accuracy: 0.4257 - loss: 0.7022\nEpoch 5: val_accuracy did not improve from 0.43750\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 908ms/step - accuracy: 0.4272 - loss: 0.7020 - val_accuracy: 0.4375 - val_loss: 0.6982\nEpoch 6/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 818ms/step - accuracy: 0.4257 - loss: 0.6985\nEpoch 6: val_accuracy did not improve from 0.43750\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 904ms/step - accuracy: 0.4272 - loss: 0.6983 - val_accuracy: 0.4375 - val_loss: 0.6954\nEpoch 7/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 814ms/step - accuracy: 0.4257 - loss: 0.6954\nEpoch 7: val_accuracy did not improve from 0.43750\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 903ms/step - accuracy: 0.4272 - loss: 0.6953 - val_accuracy: 0.4375 - val_loss: 0.6932\nEpoch 8/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 816ms/step - accuracy: 0.5743 - loss: 0.6929\nEpoch 8: val_accuracy improved from 0.43750 to 0.56250, saving model to ./models/DD_cnn_lstm_epoch(08)_acc(0.56)_valacc(0.56)_loss(0.69)_valloss(0.69).keras\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 987ms/step - accuracy: 0.5728 - loss: 0.6929 - val_accuracy: 0.5625 - val_loss: 0.6915\nEpoch 9/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 814ms/step - accuracy: 0.5743 - loss: 0.6909\nEpoch 9: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 901ms/step - accuracy: 0.5728 - loss: 0.6910 - val_accuracy: 0.5625 - val_loss: 0.6901\nEpoch 10/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 816ms/step - accuracy: 0.5743 - loss: 0.6893\nEpoch 10: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 902ms/step - accuracy: 0.5728 - loss: 0.6894 - val_accuracy: 0.5625 - val_loss: 0.6891\nEpoch 11/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 818ms/step - accuracy: 0.5743 - loss: 0.6880\nEpoch 11: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 905ms/step - accuracy: 0.5728 - loss: 0.6881 - val_accuracy: 0.5625 - val_loss: 0.6882\nEpoch 12/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 822ms/step - accuracy: 0.5743 - loss: 0.6870\nEpoch 12: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 910ms/step - accuracy: 0.5728 - loss: 0.6871 - val_accuracy: 0.5625 - val_loss: 0.6876\nEpoch 13/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 820ms/step - accuracy: 0.5743 - loss: 0.6861\nEpoch 13: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 906ms/step - accuracy: 0.5728 - loss: 0.6863 - val_accuracy: 0.5625 - val_loss: 0.6871\nEpoch 14/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 820ms/step - accuracy: 0.5743 - loss: 0.6855\nEpoch 14: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 907ms/step - accuracy: 0.5728 - loss: 0.6857 - val_accuracy: 0.5625 - val_loss: 0.6867\nEpoch 15/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 819ms/step - accuracy: 0.5743 - loss: 0.6849\nEpoch 15: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 906ms/step - accuracy: 0.5728 - loss: 0.6852 - val_accuracy: 0.5625 - val_loss: 0.6864\nEpoch 16/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 817ms/step - accuracy: 0.5743 - loss: 0.6845\nEpoch 16: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 903ms/step - accuracy: 0.5728 - loss: 0.6848 - val_accuracy: 0.5625 - val_loss: 0.6861\nEpoch 17/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 817ms/step - accuracy: 0.5743 - loss: 0.6841\nEpoch 17: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 904ms/step - accuracy: 0.5728 - loss: 0.6844 - val_accuracy: 0.5625 - val_loss: 0.6860\nEpoch 18/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 817ms/step - accuracy: 0.5743 - loss: 0.6839\nEpoch 18: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 904ms/step - accuracy: 0.5728 - loss: 0.6841 - val_accuracy: 0.5625 - val_loss: 0.6858\nEpoch 19/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 818ms/step - accuracy: 0.5743 - loss: 0.6836\nEpoch 19: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 904ms/step - accuracy: 0.5728 - loss: 0.6839 - val_accuracy: 0.5625 - val_loss: 0.6857\nEpoch 20/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 817ms/step - accuracy: 0.5743 - loss: 0.6834\nEpoch 20: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 903ms/step - accuracy: 0.5728 - loss: 0.6838 - val_accuracy: 0.5625 - val_loss: 0.6856\nEpoch 21/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 819ms/step - accuracy: 0.5743 - loss: 0.6833\nEpoch 21: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 905ms/step - accuracy: 0.5728 - loss: 0.6836 - val_accuracy: 0.5625 - val_loss: 0.6856\nEpoch 22/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 823ms/step - accuracy: 0.5743 - loss: 0.6832\nEpoch 22: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 910ms/step - accuracy: 0.5728 - loss: 0.6835 - val_accuracy: 0.5625 - val_loss: 0.6855\nEpoch 23/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 817ms/step - accuracy: 0.5743 - loss: 0.6831\nEpoch 23: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 904ms/step - accuracy: 0.5728 - loss: 0.6834 - val_accuracy: 0.5625 - val_loss: 0.6855\nEpoch 24/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 819ms/step - accuracy: 0.5743 - loss: 0.6830\nEpoch 24: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 905ms/step - accuracy: 0.5728 - loss: 0.6833 - val_accuracy: 0.5625 - val_loss: 0.6854\nEpoch 25/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 818ms/step - accuracy: 0.5743 - loss: 0.6829\nEpoch 25: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 904ms/step - accuracy: 0.5728 - loss: 0.6833 - val_accuracy: 0.5625 - val_loss: 0.6854\nEpoch 26/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 818ms/step - accuracy: 0.5743 - loss: 0.6829\nEpoch 26: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 903ms/step - accuracy: 0.5728 - loss: 0.6832 - val_accuracy: 0.5625 - val_loss: 0.6854\nEpoch 27/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 819ms/step - accuracy: 0.5743 - loss: 0.6828\nEpoch 27: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 906ms/step - accuracy: 0.5728 - loss: 0.6832 - val_accuracy: 0.5625 - val_loss: 0.6854\nEpoch 28/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 819ms/step - accuracy: 0.5743 - loss: 0.6828\nEpoch 28: val_accuracy did not improve from 0.56250\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 911ms/step - accuracy: 0.5728 - loss: 0.6831 - val_accuracy: 0.5625 - val_loss: 0.6854\n","output_type":"stream"}]},{"cell_type":"code","source":"test_loss, test_accuracy = model.evaluate(X_test, y_test)\nprint(f'Test Loss: {test_loss}, Test Accuracy: {test_accuracy}')","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:25:23.517462Z","iopub.execute_input":"2024-11-04T15:25:23.517880Z","iopub.status.idle":"2024-11-04T15:25:28.470143Z","shell.execute_reply.started":"2024-11-04T15:25:23.517842Z","shell.execute_reply":"2024-11-04T15:25:28.469072Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step - accuracy: 0.5625 - loss: 0.6915\nTest Loss: 0.6915039420127869, Test Accuracy: 0.5625\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = model.predict(X_test)\npredicted_classes = (predictions > 0.5).astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:25:44.617561Z","iopub.execute_input":"2024-11-04T15:25:44.618547Z","iopub.status.idle":"2024-11-04T15:25:46.528301Z","shell.execute_reply.started":"2024-11-04T15:25:44.618491Z","shell.execute_reply":"2024-11-04T15:25:46.527395Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 514ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"report = classification_report(y_test, predicted_classes)\nprint(report)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:26:45.192480Z","iopub.execute_input":"2024-11-04T15:26:45.193386Z","iopub.status.idle":"2024-11-04T15:26:45.215452Z","shell.execute_reply.started":"2024-11-04T15:26:45.193345Z","shell.execute_reply":"2024-11-04T15:26:45.214532Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.56      1.00      0.72        18\n           1       0.00      0.00      0.00        14\n\n    accuracy                           0.56        32\n   macro avg       0.28      0.50      0.36        32\nweighted avg       0.32      0.56      0.40        32\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}]},{"cell_type":"code","source":"cm = confusion_matrix(y_test, predicted_classes)\nprint(cm)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T15:27:05.968995Z","iopub.execute_input":"2024-11-04T15:27:05.969874Z","iopub.status.idle":"2024-11-04T15:27:05.980733Z","shell.execute_reply.started":"2024-11-04T15:27:05.969830Z","shell.execute_reply":"2024-11-04T15:27:05.979725Z"},"trusted":true},"execution_count":81,"outputs":[{"name":"stdout","text":"[[18  0]\n [14  0]]\n","output_type":"stream"}]}]}